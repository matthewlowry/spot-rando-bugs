<?xml version="1.0" encoding="UTF-8"?>
<MessageCollection 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="messagecollection.xsd"
>

    <Plugin>
        <ShortDescription>Spot Rando Bugs</ShortDescription>
        <Details>This plugin provides detectors for things that really grind Matt's gears.</Details>
    </Plugin>

    <Detector class="com.mclowry.spotrandobugs.SpringDataJpaRepoDetector">
        <Details>
            Detects problems or misues with Spring Data JPA Repository interfaces.
        </Details>
    </Detector>

    <Detector class="com.mclowry.spotrandobugs.SpringFrameworkAopDetector">
        <Details>
            Detects problems or misues with Spring Framework AOP annotations.
        </Details>
    </Detector>

    <BugPattern type="SPRING_DATA_JPA_GET">
        <ShortDescription>Use of getById or getOne.</ShortDescription>
        <LongDescription>
            The getById and getOne methods can be troublesome. Use the findById method instead.
        </LongDescription>
        <Details>
<![CDATA[
<p>Both the getById method and its deprecated equivalent getOne can be troublesome.<br>
The behaviour of these methods can vary depending on the underlying JPA provider.
If passed an entity identifier that does not exist, these methods are liable to return a reference
to a proxy that throws EntityNotFoundException if accessed, which is typically not what developers 
expect. The alternative findById method returns an Optional to explicitly signal whether an entity
with the given ID exists, which leads to simpler, cleaner, and more explicit code.</p>
]]>
        </Details>
    </BugPattern>

    <BugPattern type="SPRING_FRAMEWORK_AOP_NONPUBLIC">
        <ShortDescription>Use of AOP annotations on non-public methods.</ShortDescription>
        <LongDescription>
            AOP annotations (@Scheduled, @Transactional, etc) must only be applied to public instance methods. 
        </LongDescription>
        <Details>
<![CDATA[
<p>AOP annotations rely on generating proxies for the annotated class, injecting those
proxies rather than the "naked" bean, and achieving the specified behavior via the proxy.
Although it is technically feasible to intercept calls to non-public methods when proxies
are being generated using CGLIB, Spring as a matter of design choice refuses to do so.
Placing AOP annotations on non-public methods silently fails as it does not generate any 
compile or run time errors or warnings.</p>
]]>
        </Details>
    </BugPattern>

    <BugCode abbrev="SDJ">Spring Data JPA Bugs</BugCode>
    <BugCode abbrev="SFA">Spring Framework AOP Bugs</BugCode>
    
</MessageCollection>
